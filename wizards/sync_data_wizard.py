# -*- coding: utf-8 -*-
# –§–ê–ô–õ: wizards/sync_data_wizard.py
# –ó–ê–ú–ï–ù–ò–¢–¨ –ü–û–õ–ù–û–°–¢–¨–Æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª

from odoo import models, fields, api, _
from odoo.exceptions import UserError
import logging
import json
from datetime import datetime, timedelta

_logger = logging.getLogger(__name__)


class SyncDataWizard(models.TransientModel):
    _name = 'smartlogger.sync.data.wizard'
    _description = '–ú–∞–π—Å—Ç–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö SmartLogger'

    # –û—Å–Ω–æ–≤–Ω—ñ –ø–æ–ª—è —Å—Ç–∞—Ç—É—Å—É
    message = fields.Char(string='–°—Ç–∞—Ç—É—Å', readonly=True)
    sync_status = fields.Selection([
        ('waiting', '–û—á—ñ–∫—É–≤–∞–Ω–Ω—è'),
        ('running', '–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è'),
        ('success', '–£—Å–ø—ñ—à–Ω–æ'),
        ('error', '–ü–æ–º–∏–ª–∫–∞'),
        ('partial_success', '–ß–∞—Å—Ç–∫–æ–≤–æ —É—Å–ø—ñ—à–Ω–æ')
    ], string='–°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó', default='waiting', readonly=True)

    last_sync_date = fields.Datetime(string='–û—Å—Ç–∞–Ω–Ω—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è', readonly=True)
    sync_details = fields.Text(string='–î–µ—Ç–∞–ª—ñ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó', readonly=True)

    # –†–æ–∑—à–∏—Ä–µ–Ω—ñ –ø–æ–ª—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_stations = fields.Integer('–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–∞–Ω—Ü—ñ–π', readonly=True, default=0)
    stations_found = fields.Integer('–°—Ç–∞–Ω—Ü—ñ–π –∑–Ω–∞–π–¥–µ–Ω–æ –≤ API', readonly=True, default=0)
    stations_updated = fields.Integer('–°—Ç–∞–Ω—Ü—ñ–π –æ–Ω–æ–≤–ª–µ–Ω–æ', readonly=True, default=0)
    stations_created = fields.Integer('–°—Ç–∞–Ω—Ü—ñ–π —Å—Ç–≤–æ—Ä–µ–Ω–æ', readonly=True, default=0)
    stations_errors = fields.Integer('–°—Ç–∞–Ω—Ü—ñ–π –∑ –ø–æ–º–∏–ª–∫–∞–º–∏', readonly=True, default=0)

    # –û–ø—Ü—ñ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
    sync_mode = fields.Selection([
        ('full', '–ü–æ–≤–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è'),
        ('incremental', '–Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è'),
        ('stations_only', '–¢—ñ–ª—å–∫–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü—ñ–π'),
        ('data_only', '–¢—ñ–ª—å–∫–∏ –¥–∞–Ω—ñ KPI')
    ], string='–†–µ–∂–∏–º —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó', default='full')

    force_refresh = fields.Boolean('–ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è', default=False,
                                   help="–û–Ω–æ–≤–∏—Ç–∏ –≤—Å—ñ —Å—Ç–∞–Ω—Ü—ñ—ó, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –±—É–ª–∞ –Ω–µ–¥–∞–≤–Ω–æ")

    batch_processing = fields.Boolean('–ü–∞–∫–µ—Ç–Ω–∞ –æ–±—Ä–æ–±–∫–∞', default=True,
                                      help="–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø–∞–∫–µ—Ç–Ω—É –æ–±—Ä–æ–±–∫—É –¥–ª—è –∫—Ä–∞—â–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ")

    selected_station_ids = fields.Many2many('smartlogger.station', string='–í–∏–±—Ä–∞–Ω—ñ —Å—Ç–∞–Ω—Ü—ñ—ó',
                                            help="–ó–∞–ª–∏—à—ñ—Ç—å –ø–æ—Ä–æ–∂–Ω—ñ–º –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –≤—Å—ñ—Ö —Å—Ç–∞–Ω—Ü—ñ–π")

    # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
    sync_results = fields.Text('–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó', readonly=True)
    error_details = fields.Text('–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–æ–∫', readonly=True)
    performance_stats = fields.Text('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ', readonly=True)

    @api.model
    def default_get(self, fields_list):
        """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ –º–∞–π—Å—Ç—Ä–∞."""
        res = super(SyncDataWizard, self).default_get(fields_list)

        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ñ—Å–Ω—É—é—á–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π
            stations = self.env['smartlogger.station'].search([])
            res['total_stations'] = len(stations)

            if stations:
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—é —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
                last_synced_station = stations.filtered('last_sync').sorted('last_sync', reverse=True)
                if last_synced_station:
                    res['last_sync_date'] = last_synced_station[0].last_sync

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞—Ö
                active_count = len(stations.filtered(lambda s: s.status == 'active'))
                error_count = len(stations.filtered(lambda s: s.status in ['error', 'sync_error']))

                res['message'] = _(
                    "–ì–æ—Ç–æ–≤–∏–π –¥–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó. –°—Ç–∞–Ω—Ü—ñ–π: %d (–∞–∫—Ç–∏–≤–Ω–∏—Ö: %d, –∑ –ø–æ–º–∏–ª–∫–∞–º–∏: %d)"
                ) % (len(stations), active_count, error_count)
            else:
                res['message'] = _("–°—Ç–∞–Ω—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É —Å—Ç–∞–Ω—Ü—ñ–π –∑ API.")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            self._check_api_configuration(res)

        except Exception as e:
            _logger.warning("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %s", e)
            res['message'] = _("–ì–æ—Ç–æ–≤–∏–π –¥–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó")

        return res

    def _check_api_configuration(self, res):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API."""
        try:
            IrConfigParameter = self.env['ir.config_parameter'].sudo()
            username = IrConfigParameter.get_param('huawei.fusionsolar.username')
            password = IrConfigParameter.get_param('huawei.fusionsolar.password')

            if not username or not password:
                res['sync_status'] = 'error'
                res['message'] = _(
                    "–ü–æ–º–∏–ª–∫–∞: –ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ API. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è > –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API.")
                res['error_details'] = _("–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ username —Ç–∞/–∞–±–æ password")

        except Exception as e:
            _logger.error("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: %s", e)

    def action_sync_now(self):
        """–ó–∞–ø—É—Å–∫–∞—î —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –¥–∞–Ω–∏—Ö FusionSolar –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é."""
        self.sync_status = 'running'
        self.message = _("–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Ä–æ–∑–ø–æ—á–∞—Ç–∞...")

        start_time = datetime.now()
        sync_results = {
            'stations_processed': 0,
            'stations_created': 0,
            'stations_updated': 0,
            'stations_errors': 0,
            'api_calls_made': 0,
            'errors': []
        }

        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            if not self._validate_configuration():
                return self._return_error_result(_("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API"))

            _logger.info("–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó SmartLogger. –†–µ–∂–∏–º: %s", self.sync_mode)

            # –í–∏–∫–æ–Ω—É—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∂–∏–º—É
            if self.sync_mode == 'full':
                result = self._perform_full_sync()
            elif self.sync_mode == 'incremental':
                result = self._perform_incremental_sync()
            elif self.sync_mode == 'stations_only':
                result = self._perform_stations_only_sync()
            elif self.sync_mode == 'data_only':
                result = self._perform_data_only_sync()
            else:
                result = self._perform_full_sync()

            # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            self._process_sync_results(result, start_time)

        except UserError as e:
            return self._handle_sync_error(str(e), start_time)
        except Exception as e:
            return self._handle_sync_error(str(e), start_time, unexpected=True)

        return self._return_updated_form()

    def action_reset_api_block(self):
        """–°–∫–∏–¥–∞—î –±–ª–æ–∫—É–≤–∞–Ω–Ω—è API."""
        try:
            result = self.env['smartlogger.station'].reset_api_block()
            self.message = _("–ë–ª–æ–∫—É–≤–∞–Ω–Ω—è API —Å–∫–∏–Ω—É—Ç–æ —É—Å–ø—ñ—à–Ω–æ! –ú–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –∑–Ω–æ–≤—É.")
            self.sync_status = 'success'

        except Exception as e:
            self.message = _("–ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è API: %s") % str(e)
            self.sync_status = 'error'

        return self._return_updated_form()

    def action_check_api_status(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å API."""
        try:
            IrConfigParameter = self.env['ir.config_parameter'].sudo()

            api_blocked = IrConfigParameter.get_param('huawei.fusionsolar.api_blocked', 'false') == 'true'
            auth_error_count = int(IrConfigParameter.get_param('huawei.fusionsolar.auth_error_count', '0'))
            last_auth_error = IrConfigParameter.get_param('huawei.fusionsolar.last_auth_error', '')
            last_successful_sync = IrConfigParameter.get_param('huawei.fusionsolar.last_successful_sync', '')

            status_info = []
            if api_blocked:
                status_info.append("üî¥ API –ó–ê–ë–õ–û–ö–û–í–ê–ù–ò–ô")
                status_info.append(f"–ü–æ–º–∏–ª–æ–∫ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {auth_error_count}")
                if last_auth_error:
                    status_info.append(f"–û—Å—Ç–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∞: {last_auth_error}")
                status_info.append("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°–∫–∏–Ω—É—Ç–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è' –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è")
            else:
                status_info.append("üü¢ API –∞–∫—Ç–∏–≤–Ω–∏–π")
                if auth_error_count > 0:
                    status_info.append(f"–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –ø–æ–º–∏–ª–æ–∫: {auth_error_count}")
                if last_successful_sync:
                    status_info.append(f"–û—Å—Ç–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è: {last_successful_sync}")

            self.sync_results = "\n".join(status_info)
            self.sync_status = 'success' if not api_blocked else 'error'
            self.message = _("–°—Ç–∞—Ç—É—Å API –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ")

        except Exception as e:
            self.message = _("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É: %s") % str(e)
            self.sync_status = 'error'

        return self._return_updated_form()

    def _validate_configuration(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é API."""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π API
            self.env['smartlogger.station']._check_api_blocked_status()

            IrConfigParameter = self.env['ir.config_parameter'].sudo()
            username = IrConfigParameter.get_param('huawei.fusionsolar.username')
            password = IrConfigParameter.get_param('huawei.fusionsolar.password')
            base_url = IrConfigParameter.get_param('huawei.fusionsolar.base_url')

            if not username or not password:
                self.error_details = _("–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ API (username/password)")
                return False

            if not base_url:
                self.error_details = _("–í—ñ–¥—Å—É—Ç–Ω—ñ–π URL API —Å–µ—Ä–≤–µ—Ä–∞")
                return False

            return True

        except UserError as ue:
            # API –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π
            self.error_details = str(ue)
            return False
        except Exception as e:
            _logger.error("–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: %s", e)
            self.error_details = str(e)
            return False

    def _perform_full_sync(self):
        """–í–∏–∫–æ–Ω—É—î –ø–æ–≤–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é."""
        stations_model = self.env['smartlogger.station']

        if self.selected_station_ids:
            # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Ç—ñ–ª—å–∫–∏ –≤–∏–±—Ä–∞–Ω–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π
            _logger.info("–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è %d –≤–∏–±—Ä–∞–Ω–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π", len(self.selected_station_ids))
            return self._sync_selected_stations()
        else:
            # –ü–æ–≤–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö —Å—Ç–∞–Ω—Ü—ñ–π
            _logger.info("–ü–æ–≤–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö —Å—Ç–∞–Ω—Ü—ñ–π")
            return stations_model.sync_fusionsolar_data()

    def _perform_incremental_sync(self):
        """–í–∏–∫–æ–Ω—É—î —ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é (—Ç—ñ–ª—å–∫–∏ –¥–∞–≤–Ω–æ –Ω–µ –æ–Ω–æ–≤–ª—é–≤–∞–Ω—ñ)."""
        stations_model = self.env['smartlogger.station']

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å—Ç–∞–Ω—Ü—ñ—ó, —è–∫—ñ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞–ª–∏—Å—è –±—ñ–ª—å—à–µ –≥–æ–¥–∏–Ω–∏
        cutoff_time = datetime.now() - timedelta(hours=1)
        old_stations = stations_model.search([
            '|',
            ('last_sync', '<', cutoff_time),
            ('last_sync', '=', False)
        ])

        _logger.info("–Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è %d —Å—Ç–∞–Ω—Ü—ñ–π", len(old_stations))

        if not old_stations:
            return {
                'success': True,
                'message': _("–í—Å—ñ —Å—Ç–∞–Ω—Ü—ñ—ó –º–∞—é—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ"),
                'stations_processed': 0
            }

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ batch —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
        return self._sync_station_batch(old_stations)

    def _perform_stations_only_sync(self):
        """–û–Ω–æ–≤–ª—é—î —Ç—ñ–ª—å–∫–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü—ñ–π –±–µ–∑ KPI –¥–∞–Ω–∏—Ö."""
        try:
            stations_model = self.env['smartlogger.station']
            base_url, username, password, batch_size, request_delay = stations_model._get_fusionsolar_api_credentials()

            # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Å—Ç–∞–Ω—Ü—ñ–π
            stations_model._update_station_list(base_url, username, password, request_delay)

            new_count = len(stations_model.search([('create_date', '>=', datetime.now() - timedelta(minutes=5))]))

            return {
                'success': True,
                'message': _("–°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü—ñ–π –æ–Ω–æ–≤–ª–µ–Ω–æ"),
                'stations_created': new_count,
                'stations_processed': len(stations_model.search([]))
            }

        except Exception as e:
            _logger.error("–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —Å–ø–∏—Å–∫—É —Å—Ç–∞–Ω—Ü—ñ–π: %s", e)
            raise

    def _perform_data_only_sync(self):
        """–û–Ω–æ–≤–ª—é—î —Ç—ñ–ª—å–∫–∏ KPI –¥–∞–Ω—ñ —ñ—Å–Ω—É—é—á–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π."""
        stations_model = self.env['smartlogger.station']

        existing_stations = stations_model.search([])
        if not existing_stations:
            raise UserError(_("–ù–µ–º–∞—î —Å—Ç–∞–Ω—Ü—ñ–π –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é —Å–ø–∏—Å–∫—É —Å—Ç–∞–Ω—Ü—ñ–π."))

        _logger.info("–û–Ω–æ–≤–ª–µ–Ω–Ω—è KPI –¥–∞–Ω–∏—Ö –¥–ª—è %d —ñ—Å–Ω—É—é—á–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π", len(existing_stations))

        return self._sync_station_batch(existing_stations)

    def _sync_selected_stations(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î —Ç—ñ–ª—å–∫–∏ –≤–∏–±—Ä–∞–Ω—ñ —Å—Ç–∞–Ω—Ü—ñ—ó."""
        return self._sync_station_batch(self.selected_station_ids)

    def _sync_station_batch(self, stations):
        """–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î –ø–∞–∫–µ—Ç —Å—Ç–∞–Ω—Ü—ñ–π."""
        if not stations:
            return {'success': True, 'stations_processed': 0}

        try:
            stations_model = self.env['smartlogger.station']
            base_url, username, password, batch_size, request_delay = stations_model._get_fusionsolar_api_credentials()

            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ –ø–∞–∫–µ—Ç–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
            stations_model._sync_stations_batch(base_url, username, password, batch_size, request_delay)

            return {
                'success': True,
                'message': _("–ü–∞–∫–µ—Ç–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"),
                'stations_processed': len(stations)
            }

        except Exception as e:
            _logger.error("–ü–æ–º–∏–ª–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: %s", e)
            raise

    def _process_sync_results(self, result, start_time):
        """–û–±—Ä–æ–±–ª—è—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó."""
        duration = datetime.now() - start_time

        if result.get('success'):
            self.sync_status = 'success'

            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stations_found = result.get('stations_found', 0)
            self.stations_created = result.get('stations_created', 0)
            self.stations_updated = result.get('stations_updated', 0)
            self.stations_errors = result.get('stations_errors', 0)

            processed = result.get('stations_processed', 0)

            if self.stations_errors > 0:
                self.sync_status = 'partial_success'
                self.message = _(
                    "–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —á–∞—Å—Ç–∫–æ–≤–æ. –û–±—Ä–æ–±–ª–µ–Ω–æ: %d, –ü–æ–º–∏–ª–æ–∫: %d"
                ) % (processed, self.stations_errors)
            else:
                self.message = _(
                    "–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ! –û–±—Ä–æ–±–ª–µ–Ω–æ —Å—Ç–∞–Ω—Ü—ñ–π: %d"
                ) % processed

            self.sync_details = self._format_sync_details(result, duration)

        else:
            self.sync_status = 'error'
            self.message = result.get('message', _("–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó"))
            self.error_details = result.get('details', '')

        self.last_sync_date = fields.Datetime.now()
        self.performance_stats = self._format_performance_stats(duration, result)

    def _format_sync_details(self, result, duration):
        """–§–æ—Ä–º–∞—Ç—É—î –¥–µ—Ç–∞–ª—ñ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó."""
        details = []
        details.append(f"–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration.total_seconds():.1f} —Å–µ–∫")
        details.append(f"–†–µ–∂–∏–º —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: {dict(self._fields['sync_mode'].selection)[self.sync_mode]}")

        if result.get('stations_found'):
            details.append(f"–°—Ç–∞–Ω—Ü—ñ–π –∑–Ω–∞–π–¥–µ–Ω–æ –≤ API: {result['stations_found']}")
        if result.get('stations_created'):
            details.append(f"–ù–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π —Å—Ç–≤–æ—Ä–µ–Ω–æ: {result['stations_created']}")
        if result.get('stations_updated'):
            details.append(f"–°—Ç–∞–Ω—Ü—ñ–π –æ–Ω–æ–≤–ª–µ–Ω–æ: {result['stations_updated']}")
        if result.get('api_calls_made'):
            details.append(f"API –≤–∏–∫–ª–∏–∫—ñ–≤ –∑—Ä–æ–±–ª–µ–Ω–æ: {result['api_calls_made']}")

        return "\n".join(details)

    def _format_performance_stats(self, duration, result):
        """–§–æ—Ä–º–∞—Ç—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ."""
        stats = []
        stats.append(f"–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: {duration.total_seconds():.2f} —Å–µ–∫")

        processed = result.get('stations_processed', 0)
        if processed > 0:
            avg_time = duration.total_seconds() / processed
            stats.append(f"–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –Ω–∞ —Å—Ç–∞–Ω—Ü—ñ—é: {avg_time:.2f} —Å–µ–∫")

        api_calls = result.get('api_calls_made', 0)
        if api_calls > 0:
            stats.append(f"API –≤–∏–∫–ª–∏–∫—ñ–≤: {api_calls}")
            avg_api_time = duration.total_seconds() / api_calls
            stats.append(f"–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å API –≤–∏–∫–ª–∏–∫—É: {avg_api_time:.2f} —Å–µ–∫")

        return "\n".join(stats)

    def _handle_sync_error(self, error_msg, start_time, unexpected=False):
        """–û–±—Ä–æ–±–ª—è—î –ø–æ–º–∏–ª–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó."""
        duration = datetime.now() - start_time

        self.sync_status = 'error'

        if unexpected:
            self.message = _("–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: %s") % error_msg
            _logger.error("–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó SmartLogger: %s", error_msg, exc_info=True)
        else:
            self.message = error_msg
            _logger.error("–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó SmartLogger: %s", error_msg)

        self.error_details = error_msg
        self.performance_stats = f"–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –¥–æ –ø–æ–º–∏–ª–∫–∏: {duration.total_seconds():.2f} —Å–µ–∫"

        return self._return_updated_form()

    def _return_error_result(self, error_msg):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑ –ø–æ–º–∏–ª–∫–æ—é."""
        self.sync_status = 'error'
        self.message = error_msg
        return self._return_updated_form()

    def _return_updated_form(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –æ–Ω–æ–≤–ª–µ–Ω—É —Ñ–æ—Ä–º—É –º–∞–π—Å—Ç—Ä–∞."""
        return {
            'type': 'ir.actions.act_window',
            'res_model': 'smartlogger.sync.data.wizard',
            'view_mode': 'form',
            'res_id': self.id,
            'target': 'new',
            'context': self.env.context,
        }

    def action_close(self):
        """–ó–∞–∫—Ä–∏–≤–∞—î –º–∞–π—Å—Ç–µ—Ä."""
        return {'type': 'ir.actions.act_window_close'}

    def action_view_stations(self):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü—ñ–π."""
        return {
            'type': 'ir.actions.act_window',
            'name': _('–°—Ç–∞–Ω—Ü—ñ—ó SmartLogger'),
            'res_model': 'smartlogger.station',
            'view_mode': 'tree,form',
            'target': 'current',
        }

    def action_view_errors(self):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü—ñ–π –∑ –ø–æ–º–∏–ª–∫–∞–º–∏."""
        return {
            'type': 'ir.actions.act_window',
            'name': _('–°—Ç–∞–Ω—Ü—ñ—ó –∑ –ø–æ–º–∏–ª–∫–∞–º–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó'),
            'res_model': 'smartlogger.station',
            'view_mode': 'tree,form',
            'domain': [('status', 'in', ['error', 'sync_error'])],
            'target': 'current',
        }

    def action_retry_failed(self):
        """–ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–ª—è —Å—Ç–∞–Ω—Ü—ñ–π –∑ –ø–æ–º–∏–ª–∫–∞–º–∏."""
        failed_stations = self.env['smartlogger.station'].search([
            ('status', 'in', ['error', 'sync_error'])
        ])

        if not failed_stations:
            self.message = _("–ù–µ–º–∞—î —Å—Ç–∞–Ω—Ü—ñ–π –∑ –ø–æ–º–∏–ª–∫–∞–º–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—É")
            return self._return_updated_form()

        self.selected_station_ids = [(6, 0, failed_stations.ids)]
        self.sync_mode = 'data_only'

        return self.action_sync_now()

    def action_cleanup_old_data(self):
        """–û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö KPI –¥–∞–Ω–∏—Ö."""
        try:
            IrConfigParameter = self.env['ir.config_parameter'].sudo()
            retention_days = int(IrConfigParameter.get_param('huawei.fusionsolar.data_retention_days', '90'))

            deleted_count = self.env['smartlogger.station'].cleanup_old_kpi_data(retention_days)

            self.message = _("–û—á–∏—â–µ–Ω–æ %d —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ KPI (—Å—Ç–∞—Ä—ñ—à–µ %d –¥–Ω—ñ–≤)") % (deleted_count, retention_days)
            self.sync_status = 'success'

        except Exception as e:
            self.message = _("–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: %s") % str(e)
            self.sync_status = 'error'

        return self._return_updated_form()

    def action_show_system_info(self):
        """–ü–æ–∫–∞–∑—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É."""
        try:
            stations = self.env['smartlogger.station'].search([])

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞–Ω—Ü—ñ–π
            total_stations = len(stations)
            active_stations = len(stations.filtered(lambda s: s.status == 'active'))
            error_stations = len(stations.filtered(lambda s: s.status in ['error', 'sync_error']))

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ KPI –¥–∞–Ω–∏—Ö
            kpi_records = self.env['smartlogger.data'].search([])
            total_kpi_records = len(kpi_records)

            # –û—Å—Ç–∞–Ω–Ω—ñ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
            recent_syncs = stations.filtered('last_sync').sorted('last_sync', reverse=True)
            last_sync = recent_syncs[0].last_sync if recent_syncs else False

            # –§–æ—Ä–º—É—î–º–æ –∑–≤—ñ—Ç
            info = []
            info.append(f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            info.append(f"   ‚Ä¢ –í—Å—å–æ–≥–æ —Å—Ç–∞–Ω—Ü—ñ–π: {total_stations}")
            info.append(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {active_stations}")
            info.append(f"   ‚Ä¢ –ó –ø–æ–º–∏–ª–∫–∞–º–∏: {error_stations}")
            info.append(f"   ‚Ä¢ –ó–∞–ø–∏—Å—ñ–≤ KPI: {total_kpi_records}")
            info.append(f"")
            info.append(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è:")
            if last_sync:
                info.append(f"   ‚Ä¢ –û—Å—Ç–∞–Ω–Ω—è: {last_sync.strftime('%Y-%m-%d %H:%M:%S')}")
            else:
                info.append(f"   ‚Ä¢ –ù—ñ–∫–æ–ª–∏ –Ω–µ –≤–∏–∫–æ–Ω—É–≤–∞–ª–∞—Å—å")
            info.append(f"")
            info.append(f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö:")
            info.append(f"   ‚Ä¢ –ú–æ–¥–µ–ª—å —Å—Ç–∞–Ω—Ü—ñ–π: smartlogger.station")
            info.append(f"   ‚Ä¢ –ú–æ–¥–µ–ª—å KPI: smartlogger.data")

            self.sync_results = "\n".join(info)
            self.sync_status = 'success'
            self.message = _("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É –æ–Ω–æ–≤–ª–µ–Ω–∞")

        except Exception as e:
            self.message = _("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó: %s") % str(e)
            self.sync_status = 'error'

        return self._return_updated_form()